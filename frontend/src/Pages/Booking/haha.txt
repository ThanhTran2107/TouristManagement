import React, { useEffect, useState } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import swal from "sweetalert";
import axios from "axios";
import { toast } from "react-toastify";
import closeIcon from "../../images/close-icon.png";
const homeIcon = require("../../images/homeIcon.png");
const people = require("../../images/people.png");
const transport = require("../../images/transport.png");

const AddTourist = () => {
  const location = useLocation();
  const user = sessionStorage.getItem("userId");
  const navigate = useNavigate();
  const [isHoveredAdd, setIsHoveredAdd] = useState(false);
  const [isHoveredBook, setIsHoveredBook] = useState(false);
  const [showScroll, setShowScroll] = useState(false);

  const seats = location.state?.seat || 0;
  const tourId = location.state?.select;
  const tourAmount = location.state?.amt;
  const tourInfo = location.state?.tourInfo || {};

  const [count, setCount] = useState(1);
  const [seat, setSeat] = useState(seats);

  const currentDate = new Date();
  const today = currentDate.toISOString().split("T")[0];

  const [formValues, setFormValues] = useState([
    { touristName: "", age: "", idProof: "", idProofNo: "", phoneNumber: "" },
  ]);

  const handleChange = (i, e) => {
    let newFormValues = [...formValues];
    newFormValues[i][e.target.name] = e.target.value;
    setFormValues(newFormValues);
  };

  const addFormFields = () => {
    if (seat > 0) {
      setFormValues([
        ...formValues,
        {
          touristName: "",
          age: "",
          idProof: "",
          idProofNo: "",
          phoneNumber: "",
        },
      ]);
      setCount(count + 1);
      setSeat(seat - 1);
      setShowScroll(true);
    } else {
      toast.error("No more seats available to add.");
    }
  };

  const removeFormFields = (i) => {
    let newFormValues = [...formValues];
    newFormValues.splice(i, 1);
    setFormValues(newFormValues);
    setCount(count - 1);
    setSeat(seat + 1);
    if (newFormValues.length === 0) {
      setShowScroll(false);
    }
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    const requestObject = {
      bookingDto: {
        bookingDate: today,
        totalAmount: tourAmount * count,
        paymentStatus: "PAYMENT_SUCCESSFUL",
        seatCount: count,
      },
      touristDtoList: formValues,
    };

    axios
      .post(
        `http://localhost:9090/booking/createBooking/tour/${tourId}/user/${user}`,
        requestObject
      )
      .then((response) => {
        const result = response.data;
        if (result["status"] === "error") {
          toast.error("Something went wrong. Please check");
        } else {
          swal(
            "Success",
            `Tour Booked Successfully\n Booking ID : ${result.bookingId}`,
            "success"
          );
        }
      })
      .catch((error) => {
        console.log("error", error);
      });
  };

  return (
    <div
      style={{
        background: `linear-gradient(to right, #B4AEE8 , #EFEFEF, #93329E )`,
        height: "100vh",
        overflow: "hidden",
      }}
    >
      <div
        className="text-center"
        style={{ padding: "20px", fontFamily: "Georgia, serif" }}
      ></div>
      <br />
      <div style={styles.container}>
        <div style={styles.formContainer}>
          <h2
            style={{
              fontSize: "1.5em",
              textAlign: "center",
              marginBottom: "10px",
              marginTop: "10px",
              fontWeight: "bold",
              background: "#FCF6F5FF",
              borderRadius: "5px",
              boxShadow: "1px 0px 4px 3px #DBDBDB",
              padding: "10px",
              position: "relative",
            }}
          >
            <b>Customer Information</b>
          </h2>
          <div
            style={{
              maxHeight: showScroll ? "385px" : "400px",
              maxWidth: showScroll ? "270px" : "400px",
              overflowY: showScroll ? "scroll" : "hidden",
            }}
          >
            <form onSubmit={handleSubmit}>
              {formValues.map((element, index) => (
                <div
                  key={index}
                  style={{
                    display: "flex",
                    alignItems: "center",
                    marginBottom: "15px",
                  }}
                >
                  <div className="form-inline" style={divStyle.div}>
                    {index > 0 && (
                      <button
                        style={styles.deleteButton}
                        onClick={() => removeFormFields(index)}
                      >
                        <img
                          src={closeIcon}
                          alt="Delete"
                          style={{ width: "20px", height: "20px" }}
                        />
                      </button>
                    )}
                    <div style={divStyle.inputContainer}>
                      <label>
                        <b>Name</b>
                      </label>
                      <input
                        type="text"
                        name="touristName"
                        value={element.touristName || ""}
                        required
                        onChange={(e) => handleChange(index, e)}
                        style={divStyle.input}
                      />
                    </div>
                    <div style={divStyle.inputContainer}>
                      <label>
                        <b>Age</b>
                      </label>
                      <input
                        type="number"
                        name="age"
                        value={element.age || ""}
                        onChange={(e) => handleChange(index, e)}
                        style={divStyle.input}
                      />
                    </div>
                    <div style={divStyle.inputContainer}>
                      <label>
                        <b>Phone Number</b>
                      </label>
                      <input
                        type="text"
                        name="phoneNumber"
                        value={element.phoneNumber || ""}
                        onChange={(e) => handleChange(index, e)}
                        style={divStyle.input}
                        required
                      />
                    </div>
                    <div style={divStyle.inputContainer}>
                      <label>
                        <b>ID Proof</b>
                      </label>
                      <select
                        name="idProof"
                        value={element.idProof}
                        onChange={(e) => handleChange(index, e)}
                        style={divStyle.select}
                      >
                        <option>Choose ID</option>
                        <option>AADHAR_CARD</option>
                        <option>DRIVING_LICENSE</option>
                        <option>PAN_CARD</option>
                      </select>
                    </div>
                    <div style={divStyle.inputContainer}>
                      <label>
                        <b>ID Number</b>
                      </label>
                      <input
                        type="text"
                        name="idProofNo"
                        value={element.idProofNo || ""}
                        onChange={(e) => handleChange(index, e)}
                        style={divStyle.input}
                      />
                    </div>
                  </div>
                </div>
              ))}
              <br />
            </form>
          </div>
        </div>


        <div style={styles.transactionContainer}>

        </div>


        <div style={styles.divider}></div>
        <div style={styles.tourInfoContainer}>
          <div style={styles.card}>
            <h3 style={styles.cardTitle}>{tourInfo.tourName || "N/A"}</h3>
            <p style={styles.cardSubtitle}>
              {tourInfo.source || "N/A"} to {tourInfo.destination || "N/A"}
            </p>
            <p>
              <img src={homeIcon} alt="home icon" style={styles.icon} />
              {Math.ceil(
                (new Date(tourInfo.tourEndDate) -
                  new Date(tourInfo.tourStartDate) +
                  1) /
                  (1000 * 60 * 60 * 24)
              )}
              days
              {" - "}
              <img src={people} alt="people icon" style={styles.icon} />
              {seats} seats
              {" - "}
              <img src={transport} alt="transport icon" style={styles.icon} />
              {tourInfo.tourTransportation || "N/A"}
            </p>
            <h5 style={styles.cardActivities}>
              Activities: <b>{tourInfo.tourActivities || "N/A"}</b>
            </h5>
            <h5 style={styles.cardDetails}>
              Tour Type: <b>{tourInfo.tourType || "N/A"}</b>
            </h5>
            <h5
            style={styles.cardDetails}>
              Tour Details: <b>{tourInfo.tourDetailInfo || "N/A"}</b>
            </h5>
            <p>
              Start Date: <b>{tourInfo.tourStartDate || "N/A"}</b> | End Date: <b>{tourInfo.tourEndDate || "N/A"}</b>
            </p>
            <div style={{ borderTop: "2px solid black", margin: "10px 0" }}></div>
            <div style={{ display: "flex", alignItems: "center", marginTop: "20px" }}>
              <p style={{ fontFamily: "Uchen, serif", fontSize: "1.5em", margin: "0", marginRight: "10px" }}>
                <b>Total Amounts: </b>
              </p>
              <h2 style={styles.price}>
                {new Intl.NumberFormat("vi-VN").format(tourAmount * count)} VND
              </h2>
            </div>
            <div style={{ display: "flex", alignItems: "center", marginTop: "10px" }}>
              <p style={{ fontFamily: "Uchen, serif", fontSize: "1.5em", margin: "0", marginRight: "10px" }}>
                <b>Number of Tourists:</b>
              </p>
              <h4 style={{ margin: "0", color: "#C0392B", fontWeight: "bold" }}>
                {count}
              </h4>
            </div>
            <div style={{ display: "flex", alignItems: "center", marginTop: "10px" }}>
              <p style={{ fontFamily: "Uchen, serif", fontSize: "1.5em", margin: "0", marginRight: "10px" }}>
                <b>Number of Seats Available:</b>
              </p>
              <h4 style={{ margin: "0", color: "#C0392B", fontWeight: "bold" }}>
                {seat}
              </h4>
            </div>
          </div>
        </div>
      </div>
      <div style={styles.divider1}></div>
      <div style={{ display: "flex", justifyContent: "center", marginTop: "20px" }}>
        <button
          className="btn btn-primary"
          type="button"
          onClick={() => addFormFields()}
          style={{ ...buttonStyle.button, ...(isHoveredAdd ? buttonStyle.buttonHover : {}) }}
          onMouseEnter={() => setIsHoveredAdd(true)}
          onMouseLeave={() => setIsHoveredAdd(false)}
        >
          <h5><b>Add</b></h5>
        </button>
        <button
          className="btn btn-primary"
          type="submit"
          onClick={handleSubmit}
          style={{ ...buttonStyle.button, ...(isHoveredBook ? buttonStyle.buttonHover : {}) }}
          onMouseEnter={() => setIsHoveredBook(true)}
          onMouseLeave={() => setIsHoveredBook(false)}
        >
          <h5><b>Book</b></h5>
        </button>
      </div>
    </div>
  );
};

const styles = {
  container: {
    display: "flex",
    justifyContent: "space-between",
    alignItems: "flex-start",
    padding: "20px",
  },
  formContainer: {
    flexDirection: "column",
    flex: 1,
    marginRight: "20px",
    position: "relative",
  },
  deleteButton: {
    position: "absolute",
    top: "10px",
    right: "10px",
    background: "transparent",
    border: "none",
    cursor: "pointer",
  },
  tourInfoContainer: {
    marginTop: "10px",
    flex: 1,
    marginLeft: "20px",
  },
  divider: {
    width: "2px",
    backgroundColor: "#ccc",
    height: "100%",
    margin: "0 20px",
  },
  card: {
    backgroundColor: "#F7ECDE",
    borderRadius: "10px",
    padding: "20px",
    boxShadow: "0 4px 8px rgba(0, 0, 0, 0.2)",
    transition: "transform 0.2s",
    minHeight: "400px",
  },
  cardTitle: {
    fontFamily: "Uchen, serif",
    fontSize: "1.5em",
    color: "#2C3E50",
  },
  cardSubtitle: {
    fontSize: "1.2em",
    color: "#34495E",
  },
  icon: {
    marginRight: "5px",
  },
  cardActivities: {
    marginTop: "7px",
    fontFamily: "Uchen, serif",
    fontSize: "1.1em",
    color: "#2980B9",
  },
  cardDetails: {
    fontFamily: "Uchen, serif",
    color: "#7E7474",
    fontSize: "1.1em",
  },
  price: {
    fontSize: "1.5em",
    color: "#C0392B",
    margin: "10px 0",
    fontWeight: "bold",
  },
  perPerson: {
    color: "#7E7474",
  },
  divider: {
    width: "15px",
    backgroundColor: "white",
    height: "480px",
    margin: "0 20px",
    borderRadius: "10px",
  },
};

const divStyle = {
  div: {
    flexDirection: "column",
    display: "flex",
    justifyContent: "flex-start", // Căn chỉnh về phía bên trái
    alignItems: "flex-start", // Căn chỉnh về phía bên trái
    height: "385px",
    width: "270px",
    borderRadius: "5px",
    padding: "20px",
    marginLeft: "0",
    backgroundColor: "#FCF6F5FF",
  },
  inputContainer: {
    flex: 1,
    margin: "0 10px",
    display: "flex",
    flexDirection: "column",
  },
  input: {
    width: "100%",
    padding: "5px", // Giảm padding để giảm chiều cao
    height: "35px", // Thêm chiều cao cụ thể
    borderRadius: "5px",
    border: "1px solid #ccc",
    transition: "border-color 0.3s",
  },
  select: {
    width: "193px",
    padding: "5px", // Giảm padding để giảm chiều cao
    height: "35px", // Thêm chiều cao cụ thể
    borderRadius: "5px",
    border: "1px solid #ccc",
    transition: "border-color 0.3s",
  },
};

const buttonStyle = {
  button: {
    marginTop: "20px",
    marginRight: "25px",
    marginLeft: "30px",
    width: "100px",
    padding: "7px",
    borderRadius: "10px",
    backgroundColor: "#007bff",
    color: "#fff",
    border: "none",
    cursor: "pointer",
    transition: "background-color 0.3s ease",
  },
  buttonHover: {
    backgroundColor: "green",
  },
};

export default AddTourist;